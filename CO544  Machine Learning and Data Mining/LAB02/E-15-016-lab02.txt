/*
CO527:Advanced Database Systems
Lab02-Indexing
E/15/016
*/
1.
mysql> USE company;
Database changed

mysql> SHOW TABLES;
+-----------------------+
| Tables_in_company     |
+-----------------------+
| current_dept_emp_view |
| departments           |
| dept_emp              |
| dept_manager          |
| employees             |
| salaries              |
| salary_log            |
| titles                |
+-----------------------+
8 rows in set (0.00 sec)

--Enabling profiling by setting profiling to 1 
mysql> SET PROFILING = 1;
Query OK, 0 rows affected, 1 warning (0.00 sec)

--Retrieving all the employees by first_name
mysql> SELECT *
    -> FROM employees
    -> ORDER BY first_name ASC;
	
--Displaying status and duration columns
mysql> SHOW PROFILES;
+----------+------------+-------------------------------------------------+
| Query_ID | Duration   | Query                                           |
+----------+------------+-------------------------------------------------+
|        1 | 0.74131075 | SELECT * FROM employees
                          ORDER BY first_name ASC
 |
+----------+------------+-------------------------------------------------+
1 row in set, 1 warning (0.00 sec)

--Assuming no indexes are used
--Query execution time recorded approximately = 0.74 sec

2.
--Creating an index called ​fname_index on the ​first_name of the employee table.            
mysql> CREATE INDEX fname_index ON company.employees(first_name);
Query OK, 0 rows affected (2.48 sec)
Records: 0  Duplicates: 0  Warnings: 0

--Retrieving all the employees by first_name
mysql> SELECT *
    -> FROM employees
    -> ORDER BY first_name ASC;
	
--Displaying status and duration columns
mysql> SHOW PROFILES WHERE QUERY_ID = 10;
+----------+------------+-------------------------------------------------+
| Query_ID | Duration   | Query                                           |
+----------+------------+-------------------------------------------------+
|        10  0.34151650  SELECT * FROM employees
                         ORDER BY first_name ASC  
 |
+----------+------------+-------------------------------------------------+
1 row in set, 1 warning (0.00 sec)
	
--Index fname_index used
--Query execution time recorded approximately = 0.34 sec
--Comparing with question 1 the query execution time reduced from 0.74 sec to 0.34 sec.So,using an index
  fname_index has improved the performance of this query processing by speeding up the query.
 
3.
 mysql> SHOW INDEX FROM employees;
+-----------+------------+-------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table     | Non_unique | Key_name    | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-----------+------------+-------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| employees |          0 | PRIMARY     |            1 | emp_no      | A         |      299251 |     NULL | NULL   |      | BTREE      |         |               |
| employees |          1 | fname_index |            1 | first_name  | A         |        2671 |     NULL | NULL   | YES  | BTREE      |         |               |
+-----------+------------+-------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
2 rows in set (0.00 sec)

--The indexing technique used for creating the above index is data structure BTREE as shown in the Index_type.
-- MySQL InnoDB engine uses a clustered index usually on the primary key of the table.

4.
-- Creating a unique index on ​emp_no,first_name and ​last_name of employees table
mysql> CREATE UNIQUE INDEX unique_index ON company.employees(emp_no,first_name,last_name);
Query OK, 0 rows affected (1.83 sec)
Records: 0  Duplicates: 0  Warnings: 0
 
mysql> SHOW INDEX FROM employees;
+-----------+------------+--------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table     | Non_unique | Key_name     | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-----------+------------+--------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| employees |          0 | PRIMARY      |            1 | emp_no      | A         |      299251 |     NULL | NULL   |      | BTREE      |         |               |
| employees |          0 | unique_index |            1 | emp_no      | A         |      299251 |     NULL | NULL   |      | BTREE      |         |               |
| employees |          0 | unique_index |            2 | first_name  | A         |      299251 |     NULL | NULL   | YES  | BTREE      |         |               |
| employees |          0 | unique_index |            3 | last_name   | A         |      299251 |     NULL | NULL   | YES  | BTREE      |         |               |
| employees |          1 | fname_index  |            1 | first_name  | A         |        2671 |     NULL | NULL   | YES  | BTREE      |         |               |
+-----------+------------+--------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
5 rows in set (0.00 sec)

--Displaying status and duration columns
mysql> SHOW PROFILES WHERE QUERY_ID = 15;
+----------+------------+-------------------------------------------------+
| Query_ID | Duration   | Query                                           |
+----------+------------+-------------------------------------------------+
|        15 0.32580275    SELECT * FROM employees
                          ORDER BY emp_no,first_name,last_name
 |
+----------+------------+-------------------------------------------------+
1 row in set, 1 warning (0.00 sec)

-Retrieving all the employees by first_name,last_name and emp_no
mysql> SELECT *
    -> FROM employees
    -> ORDER BY emp_no,first_name,last_name ASC;

--Indexes fname_index,unique_index used
--Query execution time recorded approximately = 0.33 sec
--Comparing with question 1 the query execution time reduced from 0.74 sec to 0.33sec.So,using a unique index and a
  fname_index has improved the performance of this query processing by speeding up the query.unique_index further
  increases the write speed.
  
5.
 I.Choosing the attribute dept_no of dept_manager relation and creating an index for it
   will speed up all three queries as where clause is used for that attribute and it is
   the attribute that can be sorted.
   
 II.
   --Checking if MYSQL storage engine used that index for each queries
mysql> EXPLAIN select distinct emp_no from dept_manager where from_date >= '1985-01-01' and dept_no>= 'd005';
+----+-------------+--------------+-------+-----------------+---------+---------+------+------+-------------+
| id | select_type | table        | type  | possible_keys   | key     | key_len | ref  | rows | Extra       |
+----+-------------+--------------+-------+-----------------+---------+---------+------+------+-------------+
|  1 | SIMPLE      | dept_manager | index | PRIMARY,dept_no | PRIMARY | 8       | NULL |   24 | Using where |
+----+-------------+--------------+-------+-----------------+---------+---------+------+------+-------------+
1 row in set (0.07 sec)

mysql> EXPLAIN select distinct emp_no from dept_manager where from_date >= '1996-01-03' and dept_no>= 'd005';
+----+-------------+--------------+-------+-----------------+---------+---------+------+------+-------------+
| id | select_type | table        | type  | possible_keys   | key     | key_len | ref  | rows | Extra       |
+----+-------------+--------------+-------+-----------------+---------+---------+------+------+-------------+
|  1 | SIMPLE      | dept_manager | index | PRIMARY,dept_no | PRIMARY | 8       | NULL |   24 | Using where |
+----+-------------+--------------+-------+-----------------+---------+---------+------+------+-------------+
1 row in set (0.00 sec)

mysql> EXPLAIN EXTENDED select distinct emp_no from dept_manager where from_date >= '1985-01-01' and dept_no<= 'd009';
+----+-------------+--------------+-------+-----------------+---------+---------+------+------+----------+-------------+
| id | select_type | table        | type  | possible_keys   | key     | key_len | ref  | rows | filtered | Extra       |
+----+-------------+--------------+-------+-----------------+---------+---------+------+------+----------+-------------+
|  1 | SIMPLE      | dept_manager | index | PRIMARY,dept_no | PRIMARY | 8       | NULL |   24 |   100.00 | Using where |
+----+-------------+--------------+-------+-----------------+---------+---------+------+------+----------+-------------+
1 row in set, 1 warning (0.00 sec)

mysql> SHOW INDEX FROM dept_manager;
+--------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table        | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+--------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| dept_manager |          0 | PRIMARY  |            1 | emp_no      | A         |          24 |     NULL | NULL   |      | BTREE      |         |               |
| dept_manager |          0 | PRIMARY  |            2 | dept_no     | A         |          24 |     NULL | NULL   |      | BTREE      |         |               |
| dept_manager |          1 | dept_no  |            1 | dept_no     | A         |          24 |     NULL | NULL   |      | BTREE      |         |               |
+--------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
3 rows in set (0.00 sec)

--Yes,the MYSQL engine used an index called dept_no for the attribute dept_no to optimize the query.

6.-- Consider the queries I wrote for questions 2 - 10 in Lab 01 assignment.
/*
From questions 2 - 10 I used SELECT queries and WHERE clauses, so using index to the attributes related
to SELECT and WHERE helps to speed up the query execution time and to improve the performance of query
processing.Indexing is also preferred to use for the queries I wrote having GROUP BY or ORDER BY clauses.
Analyzing the Queries I wrote the following attributes on following relations should be used for creating 
indexes that could speed up my queries.Indexing all JOIN columns also optimize the query.MySQL InnoDB
 engine uses a clustered index usually on the primary key of the table.(emp_no,dept_no)
   => emp_no,birth_date,hire_date,sex attributes of employees relation
   => dept_name,dept_no attributes of departments relation
   => title attribute of titles relation
   => salary attribute of salaries relation
*/

7. In tables that have frequent, large batch updates or insert operations, using indexes should be avoided.
   Assuming most of the queries on a relation are insert/update/delete,if that relation has an index created 
   then it will slow down the data input and slow down the query execution time as there is no WHERE clause
   used while using these operations.
    	
	
--recording the query execution time for retrieving all the employees by first name in ascending order. 