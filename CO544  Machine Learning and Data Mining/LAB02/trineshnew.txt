>>> import numpy as np
>>> a=np.array([1,2,3])
>>> a.dtype
dtype('int32')
>>> a
array([1, 2, 3])
>>> matrix=np.array([np.arange(3),[i for i in range(1,4)],[6,7,8]])
>>> matrix
array([[0, 1, 2],
       [1, 2, 3],
       [6, 7, 8]])
>>>
>> np.zeros((5,2,2))
array([[[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]]])
>>> np.zeros(5,2)
Traceback (most recent call last):
  File "<pyshell#7>", line 1, in <module>
    np.zeros(5,2)
TypeError: data type not understood
>>> np.zeros((5,2))
array([[0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.],
       [0., 0.]])
>>> np.zeros((5,2,2),dtype=float)
array([[[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]]])
>>> np.zeros((5,2,2),dtype=float)
array([[[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]],

       [[0., 0.],
        [0., 0.]]])
>>> np.ones((4,5))
array([[1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.]])
>>> np.empty([3,4])
array([[ 4.45057637e-308,  1.78021527e-306,  8.45549797e-307,
         1.37962049e-306],
       [ 1.11260619e-306,  1.78010255e-306,  9.79054228e-307,
         4.45057637e-308],
       [ 8.45596650e-307,  9.34602321e-307,  4.94065646e-322,
        -1.59553196e+111]])
>>> np.arange(2,10,2)
array([2, 4, 6, 8])
>>> np.arange(2,10,1)
array([2, 3, 4, 5, 6, 7, 8, 9])
>>> 
>>> np.full([2,3],4)
array([[4, 4, 4],
       [4, 4, 4]])
>>> np.eye(3)
array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])
>>> np.linspace(2,3,5)
array([2.  , 2.25, 2.5 , 2.75, 3.  ])
>>> np.copy(matrix)
array([[0, 1, 2],
       [1, 2, 3],
       [6, 7, 8]])
>>> matrix.copy()
array([[0, 1, 2],
       [1, 2, 3],
       [6, 7, 8]])
>>> matrix.view()
array([[0, 1, 2],
       [1, 2, 3],
       [6, 7, 8]])
>>> matrix.sort()
>>> matrix
array([[0, 1, 2],
       [1, 2, 3],
       [6, 7, 8]])
>>> 
>>> matrix.sort(axis=1)
>>> matrix[0:,:1]
array([[0],
       [1],
       [6]])
>>> matrix[:2,0:2]
array([[0, 1],
       [1, 2]])
>>> matrix[:1,:]
array([[0, 1, 2]])
>>> 
try-----------------------------------------------------------------------------------------------------------------------
>>> matrix[1,0]
1
>>> matrix[0]=42
>>> matrix
array([[42, 42, 42],
       [ 1,  2,  3],
       [ 6,  7,  8]])
>>> matrix[1:3]
array([[1, 2, 3],
       [6, 7, 8]])
>>> matrix[]
SyntaxError: invalid syntax
>>> matrix[1:]
array([[1, 2, 3],
       [6, 7, 8]])
>>> matrix[1:100]
array([[1, 2, 3],
       [6, 7, 8]])
>>> matrix[:]
array([[42, 42, 42],
       [ 1,  2,  3],
       [ 6,  7,  8]])
>>> matrix[1:,:2]
array([[1, 2],
       [6, 7]])
>>> matrix[:2,1:]
array([[42, 42],
       [ 2,  3]])
>>> matrix.ravel()
array([42, 42, 42,  1,  2,  3,  6,  7,  8])
>>> matrix[:,1].copy()
array([42,  2,  7])
>>> matrix[1].tolist()
[1, 2, 3]
>>> matrix.reshape(-1)
array([42, 42, 42,  1,  2,  3,  6,  7,  8])
>>> 
---------------------------------------------------------------------------------------------------------------
>>> np.sqrt(matrix)
array([[6.4807407 , 6.4807407 , 6.4807407 ],
       [1.        , 1.41421356, 1.73205081],
       [2.44948974, 2.64575131, 2.82842712]])
>>> np.exp(matrix)
array([[1.73927494e+18, 1.73927494e+18, 1.73927494e+18],
       [2.71828183e+00, 7.38905610e+00, 2.00855369e+01],
       [4.03428793e+02, 1.09663316e+03, 2.98095799e+03]])
>>> np.min(matrix)
1
>>> np.max(matrix)
42
>>> np.max(matrix,axis=1)
array([42,  3,  8])
>>> np.min(np.maximum(np.random.rand(4),np.random.rand(4)))
0.4744399735335978
>>> np.mean(matrix)
17.0
>>> np.mean(matrix,axis=0)
array([16.33333333, 17.        , 17.66666667])
>>> np.sum(matrix)
153
>>> np.invert(matrix)
array([[-43, -43, -43],
       [ -2,  -3,  -4],
       [ -7,  -8,  -9]], dtype=int32)
>>> np.random,randn(5)
Traceback (most recent call last):
  File "<pyshell#53>", line 1, in <module>
    np.random,randn(5)
NameError: name 'randn' is not defined
>>> np.random.randn(5)
array([ 0.05134445, -0.4764676 ,  0.08793528, -1.11308339,  1.20805207])
>>> np.trace(matrix)
52
>>> 
-------------------------------------------------------------------------------------------------------------------
import random
import numpy as np

def random_walk(n):
    x,y=0,0
    a=np.array([(0,1),(0,-1),(1,0),(-1,0)])
    for i in range(n):
        (dx,dy)=random.choice(a)
        x+=dx
        y+=dy
    return x,y

for i in range(10):
    walk = random_walk(500)
    print(walk)
	
---------------------------------------------------------------------------------------------------------------------	

import pandas as pd
>>> s=pd.Series([1,4,-2,'home'],index=['a','b','c','d'])
>>> type(s)
<class 'pandas.core.series.Series'>
>>> data={'population':[1.5,1.2,2.0,1.4,0.8],'state':['Nevada','Florida','Ohio','Texas','Florida'],'year':[2003,2000,2004,1990,1994]}
>>> df=pd.DataFrame(data,index=['one','two','three','four','five'],columns= ['year','state','population','debt'])
>>> df
       year    state  population debt
one    2003   Nevada         1.5  NaN
two    2000  Florida         1.2  NaN
three  2004     Ohio         2.0  NaN
four   1990    Texas         1.4  NaN
five   1994  Florida         0.8  NaN
>>> 
>>> s[1:3]
b     4
c    -2
dtype: object
>>> s[0]
1
>>> s['d']
'home'
>>> s.values[2:]
array([-2, 'home'], dtype=object)
>>> df[['population','state']]
       population    state
one           1.5   Nevada
two           1.2  Florida
three         2.0     Ohio
four          1.4    Texas
five          0.8  Florida
>>> df.population
one      1.5
two      1.2
three    2.0
four     1.4
five     0.8
Name: population, dtype: float64
>>> df.iloc[1:]
       year    state  population debt
two    2000  Florida         1.2  NaN
three  2004     Ohio         2.0  NaN
four   1990    Texas         1.4  NaN
five   1994  Florida         0.8  NaN
>>> df.iloc[2:4:,2:5]
       population debt
three         2.0  NaN
four          1.4  NaN

>>> df.loc['one']
year            2003
state         Nevada
population       1.5
debt             NaN
Name: one, dtype: object
>>> 
>>> df.debt=34.67
>>> df.debt=[df.iloc[:,2][i]*5 for i in range(0,df.shape[0])]
>>> df.head()
       year    state  population  debt
one    2003   Nevada         1.5   7.5
two    2000  Florida         1.2   6.0
three  2004     Ohio         2.0  10.0
four   1990    Texas         1.4   7.0
five   1994  Florida         0.8   4.0
>>> df
       year    state  population  debt
one    2003   Nevada         1.5   7.5
two    2000  Florida         1.2   6.0
three  2004     Ohio         2.0  10.0
four   1990    Texas         1.4   7.0
five   1994  Florida         0.8   4.0

>>> df.tail(2)
      year    state  population  debt
four  1990    Texas         1.4   7.0
five  1994  Florida         0.8   4.0
>>> df.sample(n=3)
       year    state  population  debt
five   1994  Florida         0.8   4.0
four   1990    Texas         1.4   7.0
three  2004     Ohio         2.0  10.0
>>> import numpy as np
>>> df['newColomn']=pd.Series(np.random.randn(df.shape[0]),index=df.index)
>>> df
       year    state  population  debt  newColomn
one    2003   Nevada         1.5   7.5  -1.198357
two    2000  Florida         1.2   6.0  -1.076802
three  2004     Ohio         2.0  10.0  -1.558333
four   1990    Texas         1.4   7.0   0.672660
five   1994  Florida         0.8   4.0   0.105461
>>> df.drop_duplicates('state')
       year    state  population  debt  newColomn
one    2003   Nevada         1.5   7.5  -1.198357
two    2000  Florida         1.2   6.0  -1.076802
three  2004     Ohio         2.0  10.0  -1.558333
four   1990    Texas         1.4   7.0   0.672660
>>> df.state
one       Nevada
two      Florida
three       Ohio
four       Texas
five     Florida
Name: state, dtype: object
>>> 
-------------------------------------------------------------------------------------------------------------------------------

>>> df=pd.read_csv('sampleDataSet.csv')
>>> df
    5.1  0.222222222       3.5  ...   0.2  0.041666667     setosa
0   4.9     0.166667  3.000000  ...  0.20  0.041666667     setosa
1   4.7     0.111111  3.200000  ...  0.20  0.041666667     setosa
2   4.6     0.083333  3.100000  ...  0.20  0.041666667     setosa
3   NaN     0.194444  3.600000  ...  0.20  0.041666667     setosa
4   NaN     0.305556  3.900000  ...  0.40        0.125     setosa
..  ...          ...       ...  ...   ...          ...        ...
94  7.2     0.805556  3.000000  ...  1.60        0.625  virginica
95  7.4          NaN  0.333333  ...  0.75    virginica        NaN
96  7.9     0.999900  3.800000  ...  2.00  0.791666667  virginica
97  6.4     0.583333  2.800000  ...  2.20        0.875  virginica
98  6.3     0.555556  2.800000  ...  1.50  0.583333333  virginica

[99 rows x 9 columns]
>>> df=pd.read_csv("sampleDataSet.csv",names=['a','b','c','d','e','f','g','h','i'])
>>> df
      a         b         c         d  ...         f     g            h          i
0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
4   NaN  0.194444  3.600000  0.666667  ...       NaN  0.20  0.041666667     setosa
..  ...       ...       ...       ...  ...       ...   ...          ...        ...
95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

[100 rows x 9 columns]
>>> df.isnull().g
0     False
1     False
2     False
3     False
4     False
      ...  
95    False
96    False
97    False
98    False
99    False
Name: g, Length: 100, dtype: bool
>>> df.isnull().sum(0)
a    4
b    1
c    0
d    3
e    2
f    2
g    1
h    1
i    1
dtype: int64
>>> df=df[df.isnull().a !=True]
>>> df.isnull().sum(0)
a    0
b    1
c    0
d    3
e    2
f    1
g    1
h    1
i    1
dtype: int64
>>> df.isnull().a
0     False
1     False
2     False
3     False
7     False
      ...  
95    False
96    False
97    False
98    False
99    False
Name: a, Length: 96, dtype: bool
>>> df.dropna(axis=0).isnull().sum()
a    0
b    0
c    0
d    0
e    0
f    0
g    0
h    0
i    0
dtype: int64
>>> df.dropna(axis=1)
      a         c
0   5.1  3.500000
1   4.9  3.000000
2   4.7  3.200000
3   4.6  3.100000
7   5.0  3.400000
..  ...       ...
95  7.2  3.000000
96  7.4  0.333333
97  7.9  3.800000
98  6.4  2.800000
99  6.3  2.800000

[96 rows x 2 columns]
>>> df
      a         b         c         d  ...         f     g            h          i
0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
7   5.0  0.194444  3.400000       NaN  ...  0.084746  0.20  0.041666667     setosa
..  ...       ...       ...       ...  ...       ...   ...          ...        ...
95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

[96 rows x 9 columns]
>>> df.dropna(axis=1,how='all')
      a         b         c         d  ...         f     g            h          i
0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
7   5.0  0.194444  3.400000       NaN  ...  0.084746  0.20  0.041666667     setosa
..  ...       ...       ...       ...  ...       ...   ...          ...        ...
95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

[96 rows x 9 columns]
>>> df.dropna(axis=1,thresh=1)
      a         b         c         d  ...         f     g            h          i
0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
7   5.0  0.194444  3.400000       NaN  ...  0.084746  0.20  0.041666667     setosa
..  ...       ...       ...       ...  ...       ...   ...          ...        ...
95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

[96 rows x 9 columns]
>>> df.drop('i',axis=1)
      a         b         c         d         e         f     g            h
0   5.1  0.222222  3.500000  0.625000  1.400000  0.067797  0.20  0.041666667
1   4.9  0.166667  3.000000  0.416667  1.400000  0.067797  0.20  0.041666667
2   4.7  0.111111  3.200000  0.500000  1.300000       NaN  0.20  0.041666667
3   4.6  0.083333  3.100000  0.458333  1.500000  0.084746  0.20  0.041666667
7   5.0  0.194444  3.400000       NaN  1.500000  0.084746  0.20  0.041666667
..  ...       ...       ...       ...       ...       ...   ...          ...
95  7.2  0.805556  3.000000  0.416667  5.800000  0.813559  1.60        0.625
96  7.4       NaN  0.333333  6.100000  0.864407  1.900000  0.75    virginica
97  7.9  0.999900  3.800000  0.750000  6.400000  0.915254  2.00  0.791666667
98  6.4  0.583333  2.800000  0.333333  5.600000  0.779661  2.20        0.875
99  6.3  0.555556  2.800000  0.333333  5.100000  0.694915  1.50  0.583333333

[96 rows x 8 columns]
>>> df.fillna(899)
      a           b         c  ...     g            h          i
0   5.1    0.222222  3.500000  ...  0.20  0.041666667     setosa
1   4.9    0.166667  3.000000  ...  0.20  0.041666667     setosa
2   4.7    0.111111  3.200000  ...  0.20  0.041666667     setosa
3   4.6    0.083333  3.100000  ...  0.20  0.041666667     setosa
7   5.0    0.194444  3.400000  ...  0.20  0.041666667     setosa
..  ...         ...       ...  ...   ...          ...        ...
95  7.2    0.805556  3.000000  ...  1.60        0.625  virginica
96  7.4  899.000000  0.333333  ...  0.75    virginica        899
97  7.9    0.999900  3.800000  ...  2.00  0.791666667  virginica
98  6.4    0.583333  2.800000  ...  2.20        0.875  virginica
99  6.3    0.555556  2.800000  ...  1.50  0.583333333  virginica

[96 rows x 9 columns]
>>> df.fillna(method='ffill')
      a         b         c         d  ...         f     g            h          i
0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2   4.7  0.111111  3.200000  0.500000  ...  0.067797  0.20  0.041666667     setosa
3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
7   5.0  0.194444  3.400000  0.458333  ...  0.084746  0.20  0.041666667     setosa
..  ...       ...       ...       ...  ...       ...   ...          ...        ...
95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96  7.4  0.805556  0.333333  6.100000  ...  1.900000  0.75    virginica  virginica
97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

[96 rows x 9 columns]
>>> df.replace(6.3,600)
        a         b         c         d  ...         f     g            h          i
0     5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1     4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2     4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
3     4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
7     5.0  0.194444  3.400000       NaN  ...  0.084746  0.20  0.041666667     setosa
..    ...       ...       ...       ...  ...       ...   ...          ...        ...
95    7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96    7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
97    7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98    6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  600.0  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

[96 rows x 9 columns]
>>> df.replace('.',np.nan)
      a         b         c         d  ...         f     g            h          i
0   5.1  0.222222  3.500000  0.625000  ...  0.067797  0.20  0.041666667     setosa
1   4.9  0.166667  3.000000  0.416667  ...  0.067797  0.20  0.041666667     setosa
2   4.7  0.111111  3.200000  0.500000  ...       NaN  0.20  0.041666667     setosa
3   4.6  0.083333  3.100000  0.458333  ...  0.084746  0.20  0.041666667     setosa
7   5.0  0.194444  3.400000       NaN  ...  0.084746  0.20  0.041666667     setosa
..  ...       ...       ...       ...  ...       ...   ...          ...        ...
95  7.2  0.805556  3.000000  0.416667  ...  0.813559  1.60        0.625  virginica
96  7.4       NaN  0.333333  6.100000  ...  1.900000  0.75    virginica        NaN
97  7.9  0.999900  3.800000  0.750000  ...  0.915254  2.00  0.791666667  virginica
98  6.4  0.583333  2.800000  0.333333  ...  0.779661  2.20        0.875  virginica
99  6.3  0.555556  2.800000  0.333333  ...  0.694915  1.50  0.583333333  virginica

[96 rows x 9 columns]
>>> f=lambda df : df.max()-df.min()
>>> def f(x):
	return x.max()-x.min()

>>> df.iloc[:,3:5].apply(f)
d    6.090000
e    6.035593
dtype: float64
>>> 
>>> df.iloc[:,3:5].apply(f)
d    6.090000
e    6.035593
dtype: float64
>>> grouped=df[['a','b','e']].groupby(df['i'])
>>> grouped
<pandas.core.groupby.generic.DataFrameGroupBy object at 0x035A3150>
>>> grouped.mean()
                   a         b         e
i                                       
setosa      5.034483  0.204368  1.471429
versicolor  6.026471  0.479575  4.315152
virginica   6.625000  0.645830  5.634375
>>> grouped=df[['a','b','e']].groupby([df['i'],df['c']]).mean()
>>> grouped.unstack()
               a                                 ...    e                     
c            2.9   3.0       3.1       3.2  3.3  ...  2.4  2.5  2.6  2.7   2.8
i                                                ...                          
setosa      4.40  4.75  4.766667  4.700000  5.1  ...  NaN  NaN  NaN  NaN   NaN
versicolor  6.14  6.20  6.800000  6.433333  6.3  ...  3.6  4.4  3.5  4.3  4.52
virginica   6.80  6.95       NaN  6.750000  6.5  ...  NaN  5.1  6.9  5.1  5.40

[3 rows x 63 columns]
>>> 
---------------------------------------------------------------------------------------------------------------------
>>> df['a'].nunique()
33
>>> df['a'].value_counts()
6.4    6
6.3    6
5.8    5
5.7    5
5.1    5
5.0    4
6.5    4
6.0    4
5.4    4
5.6    4
4.8    4
4.9    4
6.7    4
5.2    3
5.5    3
7.7    3
6.1    3
7.2    3
6.8    2
4.6    2
6.6    2
5.9    2
4.7    2
6.9    2
6.2    2
7.6    1
7.0    1
4.4    1
7.4    1
7.1    1
7.9    1
4.3    1
7.3    1
Name: a, dtype: int64
>>> df.describe()
               a          b          c  ...          e          f          g
count  96.000000  95.000000  96.000000  ...  94.000000  95.000000  95.000000
mean    5.940625   0.451566   2.997222  ...   3.880472   0.509489   1.222632
std     0.856502   0.235253   0.513301  ...   1.785482   0.328692   0.743009
min     4.300000   0.010000   0.333333  ...   0.864407   0.010000   0.100000
25%     5.200000   0.250000   2.800000  ...   1.600000   0.110169   0.400000
50%     5.900000   0.444444   3.000000  ...   4.500000   0.593220   1.400000
75%     6.500000   0.611111   3.300000  ...   5.100000   0.694915   1.800000
max     7.900000   0.999900   4.400000  ...   6.900000   1.900000   2.500000

[8 rows x 7 columns]
>>> df.mean()
a    5.940625
b    0.451566
c    2.997222
d    0.485053
e    3.880472
f    0.509489
g    1.222632
dtype: float64
>>> df.sort_index().head()
     a         b    c         d    e         f    g            h       i
0  5.1  0.222222  3.5  0.625000  1.4  0.067797  0.2  0.041666667  setosa
1  4.9  0.166667  3.0  0.416667  1.4  0.067797  0.2  0.041666667  setosa
2  4.7  0.111111  3.2  0.500000  1.3       NaN  0.2  0.041666667  setosa
3  4.6  0.083333  3.1  0.458333  1.5  0.084746  0.2  0.041666667  setosa
7  5.0  0.194444  3.4       NaN  1.5  0.084746  0.2  0.041666667  setosa
>>> 
----------------------------------------------------------------------------------------------------------------------------
df=pd.read_csv('Lab02Exercise01.csv',names=['Chanel1','Chanel2','Chanel3','Chanel4','Chanel5'])
>>> df.mean()
Chanel1   -0.000129
Chanel2   -0.000297
Chanel3   -0.000502
Chanel4   -0.000301
Chanel5   -0.000772
dtype: float64
>>> df
        Chanel1   Chanel2   Chanel3   Chanel4   Chanel5
0     -0.022098 -0.135461 -0.100475 -0.014574  0.036626
1     -0.021707 -0.164396 -0.106911 -0.027774 -0.045130
2           NaN -0.107590 -0.044757 -0.040040 -0.080305
3      0.014929 -0.016449 -0.001463 -0.045280  0.000612
4     -0.000988  0.005172 -0.052417 -0.054542  0.090948
...         ...       ...       ...       ...       ...
23993  0.246057  1.039765  1.429124  0.649511  0.953896
23994  0.260120  1.130245  1.510286  0.699971  1.042690
23995  0.286042  1.284954  1.639914  0.766578  1.160491
23996  0.308476  1.392243  1.749650  0.811173  1.232035
23997  0.314683  1.393349  1.792961  0.821080  1.225376

[23998 rows x 5 columns]
>>> new_df=df.fillna(df.mean())
>>> new_df
        Chanel1   Chanel2   Chanel3   Chanel4   Chanel5
0     -0.022098 -0.135461 -0.100475 -0.014574  0.036626
1     -0.021707 -0.164396 -0.106911 -0.027774 -0.045130
2     -0.000129 -0.107590 -0.044757 -0.040040 -0.080305
3      0.014929 -0.016449 -0.001463 -0.045280  0.000612
4     -0.000988  0.005172 -0.052417 -0.054542  0.090948
...         ...       ...       ...       ...       ...
23993  0.246057  1.039765  1.429124  0.649511  0.953896
23994  0.260120  1.130245  1.510286  0.699971  1.042690
23995  0.286042  1.284954  1.639914  0.766578  1.160491
23996  0.308476  1.392243  1.749650  0.811173  1.232035
23997  0.314683  1.393349  1.792961  0.821080  1.225376

[23998 rows x 5 columns]
>>> df.isnull().sum(0)
Chanel1     3
Chanel2    11
Chanel3    13
Chanel4     4
Chanel5     9
dtype: int64
>>> new_df.isnull().sum(0)
Chanel1    0
Chanel2    0
Chanel3    0
Chanel4    0
Chanel5    0
dtype: int64
>>> 

